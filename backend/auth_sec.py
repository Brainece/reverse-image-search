# OAuth2 token implementation
from fastapi import Depends, FastAPI, HTTPException, status
from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm
from pydantic import BaseModel
from datetime import datetime, timedelta
from jose import JWTError, jwt
from passlib.context import CryptContext
from typing import Optional

# basic security implementation imports
import secrets
#from fastapi import FastAPI,  Depends, HTTPException, status
from fastapi.security import HTTPBasic, HTTPBasicCredentials

# hardcoded db - to be removed and replaced with real db
db = {
    "samba": {
        "username": "samba",
        "fullname": "Brian Samba",
        "email": "oluochboss@gmail.com",
        "hashed_password": "$2b$12$sD39SzXB4NEaDXHhQ/IWBupLJGfSjuTM1XgmbCkdtZ2Nz3ny62Z62",
        "disabled": False
    },
    "liz": {
        "username": "gacheru",
        "fullname": "Elizabeth Gacheru",
        "email": "gacheru@gmail.com",
        "hashed_password": "$2b$12$sD39SzXB4NEaDXHhQ/IWBupLJGfSjuTM1XgmbCkdtZ2Nz3ny62Z62",
        "disabled": False
    },
     "kennedy": {
        "username": "machoka",
        "fullname": "Kennedy Machoka",
        "email": "machoka@gmail.com",
        "hashed_password": "$2b$12$sD39SzXB4NEaDXHhQ/IWBupLJGfSjuTM1XgmbCkdtZ2Nz3ny62Z62",
        "disabled": False
    }

}

SECRET_KEY = "e0a9247bd28c290de76152b1b2784f8809a9837ee6470ec590967e037ddb36b3" # generated by openssl rand -hex 32
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 30
#REFRESH_TOKEN_EXPIRE_MINUTES = 60 * 24 * 7 # refresh token expires after 7 days

class Token(BaseModel):
    access_token: str
    token_type: str

class TokenData(BaseModel):
    username: Optional[str] = None

class User(BaseModel):
    username: str | None = None
    email: str | None = None
    fullname: str | None = None
    disabled: bool | None = None

class UserInDB(User):
    hashed_password: str


pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="login")


def verify_password(plain_password, hashed_password):
    return pwd_context.verify(plain_password, hashed_password)

def get_password_hash(password):
    return pwd_context.hash(password)

def get_user(db, username: str):
    if username in db:
        user_data = db[username]
        return UserInDB(**user_data)
    
def authenticate_user(db, username: str, password: str):
    user = get_user(db, username)
    if not user:
        return False
    if not verify_password(password, user.hashed_password):
        return False
    return user

def create_access_token(data: dict, expires_delta: timedelta | None = None):
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.utcnow() + expires_delta
    else:
        expire = datetime.utcnow() + timedelta(minutes=15)

    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt

async def get_current_user(token: str = Depends(oauth2_scheme)):
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        username: str = payload.get("sub")
        if username is None:
            raise credentials_exception
        token_data = TokenData(username=username)
    except jwt.ExpiredSignatureError:
        # this is where the frontend will hanldle the 401 and attempt a refresh
        raise HTTPException(status_code=401, detail="Token expired")
    except JWTError:
        raise credentials_exception
    
    user = get_user(db, username=token_data.username)
    if user is None:
        raise credentials_exception
    return user

async def get_current_active_user(current_user: UserInDB = Depends(get_current_user)):
    if current_user.disabled:
        raise HTTPException(status_code=400, detail="Inactive user")
    return current_user  


security = HTTPBasic()

# function for basic sec - user and password implementation
def authenticate_user_basic(credentials:HTTPBasicCredentials = Depends(security)):
    correct_username = secrets.compare_digest(credentials.username, "brian")
    correct_password = secrets.compare_digest(credentials.password, "brian1234")

    if not (correct_username and correct_password):
        raise HTTPException(
            status_code = status.HTTP_401_UNAUTHORIZED,
            detail ="Invalid credentials",
            header={"WWW-Authenticate": "Basic"},            
        )

    return credentials.username